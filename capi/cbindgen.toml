# See https://github.com/mozilla/cbindgen/blob/master/docs.md#cbindgentoml

language = "C"
cpp_compat = true
include_guard = "__blazesym_h_"
usize_is_size_t = true
after_includes = """\
/* Helper macro to declare and initialize a blazesym input struct
 *
 * This dance with uninitialized declaration, followed by memset to zero,
 * followed by assignment using compound literal syntax is done to preserve
 * ability to use a nice struct field initialization syntax and **hopefully**
 * have all the padding bytes initialized to zero. It's not guaranteed though,
 * when copying literal, that compiler won't copy garbage in literal's padding
 * bytes, but that's the best way I've found and it seems to work in practice.
 *
 * Macro declares opts struct of given type and name, zero-initializes,
 * including any extra padding, it with memset() and then assigns initial
 * values provided by users in struct initializer-syntax as varargs.
 */
#define BLAZE_INPUT(TYPE, NAME, ...)        \\
  struct TYPE NAME = ({                     \\
    memset(&NAME, 0, sizeof(struct TYPE));  \\
    (struct TYPE) {                         \\
      ._size = sizeof(struct TYPE),         \\
      __VA_ARGS__                           \\
    };                                      \\
  })
"""

[export]
item_types = ["globals", "enums", "structs", "unions", "typedefs", "opaque", "functions"]
exclude = ["Addr"]

[export.rename]
"Addr" = "uintptr_t"
"Inspector" = "struct blaze_inspector"
"Normalizer" = "struct blaze_normalizer"
"Symbolizer" = "struct blaze_symbolizer"

[fn]
args = "Vertical"
rename_args = "none"

[struct]
associated_constants_in_body = true
derive_eq = true
derive_ostream = true

[enum]
add_sentinel = false
derive_helper_methods = true
derive_ostream = true

[macro_expansion]
bitflags = true
